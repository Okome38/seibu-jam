Okome38/seibu-jam
main

GITHUB

このサイトのレイアウトやデザインを、よりモダンでユーザーフレンドリーにしたい。homeのIndexは混雑度グラフ、天気予報、掲示板の順に上から並べたい。丼カウンターはあまり変更しなくてよい。必要であれば変更すること。変更するのはあくまでデザインとレイアウトであって、それ以外は可能な限り変更しないこと。必要であればその旨言って。

編集
このサイトのデザインとレイアウトを確認しました。ホームページをモダンでユーザーフレンドリーなデザインに変更し、混雑度グラフ、天気予報、掲示板の順に並べ直します。

主な変更点：

ホームページ（Index.cshtml）のレイアウトとデザインを刷新
レスポンシブデザインの改善
カードベースのモダンなUI
色彩とタイポグラフィの改善

Modern Home Index View
インタラクティブアーティファクト 






@model List<seibuDatabase.Models.Message>
@{
    ViewData["Title"] = "青武jam";
}

<div class="hero-section">
    <div class="container">
        <div class="text-center mb-5">
            <h1 class="hero-title">🎌 青武jam</h1>
            <p class="hero-subtitle">福井高専 学生生活サポートダッシュボード</p>
            <a href="https://www.fukui-nct.ac.jp/wp/wp-content/uploads/2025/04/2faa9754d9a33485215a756bb4c73525-1.pdf" 
               class="btn btn-outline-primary btn-sm" target="_blank">
                📅 行事予定を確認
            </a>
        </div>
    </div>
</div>

<div class="container">
    <!-- 混雑度グラフセクション -->
    <div class="section-card mb-5">
        <div class="card-header-modern">
            <h2 class="section-title">
                <span class="icon">🛁</span>
                寮の風呂 混雑度予測
            </h2>
            <p class="section-subtitle">現在の状況に基づいた予測データです</p>
        </div>
        <div class="chart-container">
            <canvas id="congestionChart"></canvas>
        </div>
    </div>

    <!-- 天気予報セクション -->
    <div class="section-card mb-5">
        <div class="card-header-modern">
            <h2 class="section-title">
                <span class="icon">🌤️</span>
                今日・明日の天気
            </h2>
            <div id="location" class="weather-source"></div>
        </div>
        
        <div id="weatherForecast" class="weather-forecast-grid">
            <div class="weather-card loading">
                <div class="weather-date">読み込み中...</div>
                <div class="weather-icon-container">
                    <div class="loading-spinner"></div>
                </div>
                <div class="weather-description">データを取得中</div>
                <div class="weather-temp">
                    <span class="temp-min">-℃</span>
                    <span class="temp-separator">/</span>
                    <span class="temp-max">-℃</span>
                </div>
            </div>
        </div>
        
        <div id="currentWeatherText" class="weather-status"></div>
    </div>

    <!-- 掲示板セクション -->
    <div class="section-card">
        <div class="card-header-modern">
            <h2 class="section-title">
                <span class="icon">💬</span>
                コミュニティ掲示板
            </h2>
            <p class="section-subtitle">みんなで情報を共有しましょう</p>
        </div>

        <!-- 投稿フォーム -->
        <div class="post-form-container">
            <form asp-controller="Firebase" asp-action="PostMessage" method="post" class="post-form">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">お名前</label>
                        <input type="text" name="name" class="form-control modern-input" 
                               placeholder="ニックネームでもOK" required maxlength="50">
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">メッセージ</label>
                    <textarea name="message" class="form-control modern-input" rows="3" 
                              placeholder="何か共有したいことはありますか？" required maxlength="500"></textarea>
                </div>
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary btn-post">
                        <span class="btn-icon">📝</span>
                        投稿する
                    </button>
                </div>
            </form>
        </div>

        <!-- メッセージ一覧 -->
        <div class="messages-section">
            <div class="messages-header">
                <h3 class="messages-title">最近の投稿</h3>
                <span class="messages-count">
                    @(Model?.Count ?? 0) 件の投稿
                </span>
            </div>
            
            <div class="messages-container">
                @if (Model != null && Model.Count > 0)
                {
                    @foreach (var msg in Model.OrderByDescending(m => m.timestamp).Take(20))
                    {
                        <div class="message-card">
                            <div class="message-header">
                                <span class="message-author">@msg.name</span>
                                <span class="message-time">@msg.timestamp.ToLocalTime().ToString("MM/dd HH:mm")</span>
                            </div>
                            <div class="message-content">
                                @msg.message
                            </div>
                        </div>
                    }
                    
                    @if (Model.Count > 20)
                    {
                        <div class="more-messages">
                            <p class="text-muted">他に @(Model.Count - 20) 件の投稿があります</p>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <div class="empty-icon">💭</div>
                        <p class="empty-text">まだ投稿がありません</p>
                        <p class="empty-subtext">最初の投稿をしてみませんか？</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
/* 全体的なスタイル */
:root {
    --primary-color: #2563eb;
    --secondary-color: #64748b;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --danger-color: #ef4444;
    --background-light: #f8fafc;
    --background-white: #ffffff;
    --text-primary: #1e293b;
    --text-secondary: #64748b;
    --border-light: #e2e8f0;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
    --radius: 12px;
    --radius-sm: 8px;
}

body {
    background-color: var(--background-light);
    color: var(--text-primary);
    font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
    line-height: 1.6;
}

/* ヒーローセクション */
.hero-section {
    background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);
    color: white;
    padding: 3rem 0;
    margin: -1rem -15px 2rem -15px;
}

.hero-title {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.hero-subtitle {
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
    opacity: 0.9;
}

/* セクションカード */
.section-card {
    background: var(--background-white);
    border-radius: var(--radius);
    box-shadow: var(--shadow-md);
    overflow: hidden;
    border: 1px solid var(--border-light);
}

.card-header-modern {
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-light);
    background: linear-gradient(90deg, #fafafa 0%, #ffffff 100%);
}

.section-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0 0 0.25rem 0;
    color: var(--text-primary);
}

.section-title .icon {
    font-size: 1.25rem;
}

.section-subtitle {
    color: var(--text-secondary);
    margin: 0;
    font-size: 0.9rem;
}

/* チャートコンテナ */
.chart-container {
    padding: 2rem;
    background: var(--background-white);
}

#congestionChart {
    max-width: 100%;
    height: 300px !important;
}

/* 天気予報 */
.weather-source {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

.weather-source a {
    color: var(--primary-color);
    text-decoration: none;
}

.weather-forecast-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    padding: 2rem;
}

.weather-card {
    background: linear-gradient(135deg, #f8fafc 0%, #ffffff 100%);
    border: 1px solid var(--border-light);
    border-radius: var(--radius);
    padding: 1.5rem;
    text-align: center;
    transition: all 0.3s ease;
    position: relative;
}

.weather-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.weather-card.loading {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
}

.weather-date {
    font-weight: 600;
    font-size: 1rem;
    margin-bottom: 1rem;
    color: var(--text-primary);
}

.weather-icon-container {
    margin: 1rem 0;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.weather-img {
    width: 60px;
    height: 60px;
    object-fit: contain;
}

.loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid var(--border-light);
    border-top: 3px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.weather-description {
    font-weight: 500;
    margin-bottom: 0.75rem;
    color: var(--text-primary);
}

.weather-temp {
    font-size: 1.1rem;
    font-weight: 600;
}

.temp-min {
    color: var(--primary-color);
}

.temp-max {
    color: var(--danger-color);
}

.temp-separator {
    color: var(--text-secondary);
    margin: 0 0.25rem;
}

.weather-status {
    padding: 1rem 2rem;
    background: var(--background-light);
    border-top: 1px solid var(--border-light);
    font-size: 0.9rem;
    color: var(--text-secondary);
    text-align: center;
}

/* 投稿フォーム */
.post-form-container {
    padding: 2rem;
    background: var(--background-light);
    border-bottom: 1px solid var(--border-light);
}

.post-form {
    max-width: 600px;
    margin: 0 auto;
}

.form-row {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
    margin-bottom: 1rem;
}

.form-group {
    margin-bottom: 1rem;
}

.form-label {
    display: block;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.modern-input {
    width: 100%;
    padding: 0.75rem 1rem;
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    font-size: 1rem;
    transition: all 0.2s ease;
    background: var(--background-white);
}

.modern-input:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
}

.form-actions {
    text-align: center;
    margin-top: 1.5rem;
}

.btn-post {
    background: linear-gradient(135deg, var(--primary-color) 0%, #1d4ed8 100%);
    border: none;
    padding: 0.75rem 2rem;
    border-radius: var(--radius-sm);
    font-weight: 500;
    transition: all 0.3s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

.btn-post:hover {
    transform: translateY(-1px);
    box-shadow: var(--shadow-md);
    background: linear-gradient(135deg, #1d4ed8 0%, #1e40af 100%);
}

.btn-icon {
    font-size: 1rem;
}

/* メッセージセクション */
.messages-section {
    padding: 2rem;
}

.messages-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-light);
}

.messages-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
}

.messages-count {
    background: var(--background-light);
    color: var(--text-secondary);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: 500;
}

.messages-container {
    max-height: 600px;
    overflow-y: auto;
}

.message-card {
    background: var(--background-white);
    border: 1px solid var(--border-light);
    border-radius: var(--radius-sm);
    padding: 1rem 1.25rem;
    margin-bottom: 0.75rem;
    transition: all 0.2s ease;
}

.message-card:hover {
    border-color: var(--primary-color);
    box-shadow: var(--shadow-sm);
}

.message-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.5rem;
}

.message-author {
    font-weight: 600;
    color: var(--primary-color);
    font-size: 0.9rem;
}

.message-time {
    font-size: 0.8rem;
    color: var(--text-secondary);
}

.message-content {
    color: var(--text-primary);
    line-height: 1.5;
    word-wrap: break-word;
}

/* 空の状態 */
.empty-state {
    text-align: center;
    padding: 3rem 1rem;
    color: var(--text-secondary);
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
    opacity: 0.5;
}

.empty-text {
    font-size: 1.1rem;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
}

.empty-subtext {
    font-size: 0.9rem;
    margin: 0;
}

.more-messages {
    text-align: center;
    padding: 1rem;
    border-top: 1px solid var(--border-light);
    margin-top: 1rem;
}

/* レスポンシブデザイン */
@media (max-width: 768px) {
    .hero-title {
        font-size: 2rem;
    }
    
    .hero-subtitle {
        font-size: 1rem;
    }
    
    .section-card {
        margin-left: -15px;
        margin-right: -15px;
        border-radius: 0;
    }
    
    .card-header-modern,
    .chart-container,
    .post-form-container,
    .messages-section {
        padding: 1rem;
    }
    
    .weather-forecast-grid {
        grid-template-columns: 1fr;
        padding: 1rem;
    }
    
    .messages-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .form-row {
        grid-template-columns: 1fr;
    }
}

/* スクロールバーのスタイル */
.messages-container::-webkit-scrollbar {
    width: 6px;
}

.messages-container::-webkit-scrollbar-track {
    background: var(--background-light);
    border-radius: 3px;
}

.messages-container::-webkit-scrollbar-thumb {
    background: var(--border-light);
    border-radius: 3px;
}

.messages-container::-webkit-scrollbar-thumb:hover {
    background: var(--text-secondary);
}
</style>

<script>
// 天気コードマッピング
const weatherCode = {
    100: ["100.svg", "500.svg", "晴れ"],
    101: ["101.svg", "501.svg", "晴れ時々曇り"],
    102: ["102.svg", "502.svg", "晴れ一時雨"],
    103: ["102.svg", "502.svg", "晴れ時々雨"],
    104: ["104.svg", "504.svg", "晴れ一時雪"],
    105: ["104.svg", "504.svg", "晴れ時々雪"],
    106: ["102.svg", "502.svg", "晴れ一時雨か雪"],
    107: ["102.svg", "502.svg", "晴れ時々雨か雪"],
    108: ["102.svg", "502.svg", "晴れ一時雨か雷雨"],
    110: ["110.svg", "510.svg", "晴れ後時々曇り"],
    111: ["110.svg", "510.svg", "晴れ後曇り"],
    112: ["112.svg", "512.svg", "晴れ後一時雨"],
    113: ["112.svg", "512.svg", "晴れ後時々雨"],
    114: ["112.svg", "512.svg", "晴れ後雨"],
    115: ["115.svg", "515.svg", "晴れ後一時雪"],
    116: ["115.svg", "515.svg", "晴れ後時々雪"],
    117: ["115.svg", "515.svg", "晴れ後雪"],
    118: ["112.svg", "512.svg", "晴れ後雨か雪"],
    119: ["112.svg", "512.svg", "晴れ後雨か雷雨"],
    120: ["102.svg", "502.svg", "晴れ朝夕一時雨"],
    200: ["200.svg", "200.svg", "曇り"],
    201: ["201.svg", "601.svg", "曇り時々晴れ"],
    202: ["202.svg", "202.svg", "曇り一時雨"],
    203: ["202.svg", "202.svg", "曇り時々雨"],
    204: ["204.svg", "204.svg", "曇り一時雪"],
    300: ["300.svg", "300.svg", "雨"],
    301: ["301.svg", "701.svg", "雨時々晴れ"],
    302: ["302.svg", "302.svg", "雨時々止む"],
    400: ["400.svg", "400.svg", "雪"],
    401: ["401.svg", "801.svg", "雪時々晴れ"],
    402: ["402.svg", "402.svg", "雪時々止む"]
};

const dayList = ["日", "月", "火", "水", "木", "金", "土"];

// デフォルトの混雑度データ
const baseCongestion = [
    { time: "17時", percent: 10 },
    { time: "18時", percent: 50 },
    { time: "19時", percent: 70 },
    { time: "20時", percent: 40 },
    { time: "21時", percent: 50 },
    { time: "22時", percent: 30 },
    { time: "23時", percent: 20 }
];

// 混雑度グラフを作成する関数
function createCongestionChart(weatherData = null) {
    let adjustedCongestion = [...baseCongestion];
    
    if (weatherData) {
        const currentDate = new Date(weatherData.date);
        const dayOfWeek = currentDate.getDay();
        
        // 金土日の場合は混雑度を下げる
        if (dayOfWeek === 5 || dayOfWeek === 6 || dayOfWeek === 0) {
            adjustedCongestion = adjustedCongestion.map(item => ({
                time: item.time,
                percent: Math.round(item.percent * 0.2)
            }));
        } else if (weatherData.telop && weatherData.telop.includes("雨")) {
            // 雨の場合は早い時間にシフト
            for (let i = 2; i > 0; i--) {
                const movePercent = Math.min(20, adjustedCongestion[i].percent);
                adjustedCongestion[i].percent -= movePercent;
                adjustedCongestion[i - 1].percent += movePercent;
            }
        }
    }
    
    const labels = adjustedCongestion.map(item => item.time);
    const data = adjustedCongestion.map(item => item.percent);
    
    const ctx = document.getElementById('congestionChart');
    if (ctx) {
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: '混雑度（%）',
                    data: data,
                    backgroundColor: 'rgba(37, 99, 235, 0.1)',
                    borderColor: 'rgba(37, 99, 235, 1)',
                    borderWidth: 3,
                    fill: true,
                    tension: 0.4,
                    pointBackgroundColor: 'rgba(37, 99, 235, 1)',
                    pointBorderColor: '#fff',
                    pointBorderWidth: 3,
                    pointRadius: 6,
                    pointHoverRadius: 8,
                    pointHoverBackgroundColor: 'rgba(37, 99, 235, 1)',
                    pointHoverBorderColor: '#fff',
                    pointHoverBorderWidth: 3
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: { 
                            stepSize: 25,
                            callback: function(value) {
                                return value + '%';
                            }
                        },
                        grid: {
                            color: 'rgba(226, 232, 240, 0.5)',
                            drawBorder: false
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        }
                    }
                },
                elements: {
                    point: {
                        hoverRadius: 8
                    }
                }
            }
        });
    }
}

// 天気データを取得する関数
async function fetchWeatherData() {
    try {
        const url = "https://www.jma.go.jp/bosai/forecast/data/forecast/180000.json";
        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error('天気データの取得に失敗しました');
        }
        
        const weather = await response.json();
        
        // 地域名を表示
        const locationElement = document.getElementById("location");
        if (locationElement && weather[1]) {
            locationElement.innerHTML = 
                `${weather[1].publishingOffice}: ${weather[1].timeSeries[0].areas[0].area.name} - ` +
                `<a href="https://www.jma.go.jp/bosai/forecast/" target="_blank">気象庁のデータを元に作成</a>`;
        }
        
        // 天気予報を表示
        displayWeatherForecast(weather);
        
        // 現在の天気データを取得
        const currentWeatherData = getCurrentWeatherData(weather);
        
        // 混雑度グラフを作成
        createCongestionChart(currentWeatherData);
        
    } catch (error) {
        console.error('天気データの取得エラー:', error);
        
        // エラー時は現在の日付で基本の混雑度グラフを表示
        const currentWeatherText = document.getElementById("currentWeatherText");
        if (currentWeatherText) {
            currentWeatherText.innerHTML = '<span style="color: #ef4444;">⚠️ 天気データの取得に失敗しました。基本の混雑度を表示しています。</span>';
        }
        
        // ローディング状態を解除
        const weatherForecast = document.getElementById("weatherForecast");
        if (weatherForecast) {
            weatherForecast.innerHTML = `
                <div class="weather-card">
                    <div class="weather-date">データ取得エラー</div>
                    <div class="weather-icon-container">
                        <span style="font-size: 2rem;">⚠️</span>
                    </div>
                    <div class="weather-description">天気情報を取得できませんでした</div>
                    <div class="weather-temp">
                        <span class="temp-min">-℃</span>
                        <span class="temp-separator">/</span>
                        <span class="temp-max">-℃</span>
                    </div>
                </div>
            `;
        }
        
        createCongestionChart();
    }
}

// 天気予報を表示する関数
function displayWeatherForecast(weather) {
    const weatherForecast = document.getElementById("weatherForecast");
    if (!weatherForecast) return;
    
    // 既存の天気アイテムをクリア
    weatherForecast.innerHTML = '';
    
    try {
        const weatherCodes = weather[0].timeSeries[0].areas[0].weatherCodes;
        const timeDefines = weather[0].timeSeries[0].timeDefines;
        
        // 気温データを取得
        let tempData = null;
        try {
            tempData = weather[0].timeSeries[2];
        } catch (e) {
            console.log('気温データが見つかりません:', e);
        }
        
        // 最初の2日分を表示
        for (let i = 0; i < Math.min(2, weatherCodes.length); i++) {
            const temperatures = getTemperatureData(tempData, i);
            const weatherItem = createWeatherItem(weatherCodes[i], timeDefines[i], temperatures);
            weatherForecast.appendChild(weatherItem);
        }
    } catch (error) {
        console.error('天気予報の表示エラー:', error);
        weatherForecast.innerHTML = `
            <div class="weather-card">
                <div class="weather-date">エラー</div>
                <div class="weather-icon-container">
                    <span style="font-size: 2rem;">❌</span>
                </div>
                <div class="weather-description">天気データの表示に失敗しました</div>
                <div class="weather-temp">
                    <span class="temp-min">-℃</span>
                    <span class="temp-separator">/</span>
                    <span class="temp-max">-℃</span>
                </div>
            </div>
        `;
    }
}

// 気温データを取得する関数
function getTemperatureData(tempData, dayIndex) {
    if (!tempData || !tempData.areas || !tempData.areas[0]) {
        return { min: "--", max: "--" };
    }
    
    try {
        const area = tempData.areas[0];
        let minTemp = "--";
        let maxTemp = "--";
        
        // 最高気温
        if (area.tempsMax && area.tempsMax[dayIndex] !== null && area.tempsMax[dayIndex] !== undefined) {
            maxTemp = area.tempsMax[dayIndex];
        }
        
        // 最低気温
        if (area.tempsMin && area.tempsMin[dayIndex] !== null && area.tempsMin[dayIndex] !== undefined) {
            minTemp = area.tempsMin[dayIndex];
        }
        
        return { min: minTemp, max: maxTemp };
    } catch (error) {
        console.error('気温データの取得エラー:', error);
        return { min: "--", max: "--" };
    }
}

// 天気アイテムを作成する関数
function createWeatherItem(weatherCodeValue, timeDefine, temperatures = { min: "--", max: "--" }) {
    const weatherItem = document.createElement('div');
    weatherItem.className = 'weather-item';
    
    const dt = new Date(timeDefine);
    const weekdayCount = dt.getDay();
    const month = String(dt.getMonth() + 1).padStart(2, '0');
    const day = String(dt.getDate()).padStart(2, '0');
    
    const weatherInfo = weatherCode[weatherCodeValue] || ["", "", "不明"];
    
    weatherItem.innerHTML = `
        <div class="date" style="color: ${weekdayCount === 0 ? 'red' : weekdayCount === 6 ? 'blue' : 'black'}">
            ${month}/${day}(${dayList[weekdayCount]})
        </div>
        <img class="weather-img" src="https://www.jma.go.jp/bosai/forecast/img/${weatherInfo[0]}" alt="${weatherInfo[2]}">
        <div class="weather-telop">${weatherInfo[2]}</div>
        <div><span class="temp-min">${temperatures.min}℃</span>/<span class="temp-max">${temperatures.max}℃</span></div>
    `;
    
    return weatherItem;
}

// 現在の天気データを取得する関数
function getCurrentWeatherData(weather) {
    try {
        const weatherCodes = weather[0].timeSeries[0].areas[0].weatherCodes;
        const timeDefines = weather[0].timeSeries[0].timeDefines;
        
        const currentWeatherData = {
            date: timeDefines[0],
            telop: weatherCode[weatherCodes[0]] ? weatherCode[weatherCodes[0]][2] : "不明",
            tempMin: "--",
            tempMax: "--"
        };
        
        // 現在の天気テキストを表示
        const currentWeatherText = document.getElementById("currentWeatherText");
        if (currentWeatherText) {
            currentWeatherText.textContent = 
                `現在の天気: ${currentWeatherData.telop} (${new Date(currentWeatherData.date).toLocaleDateString()})`;
        }
        
        return currentWeatherData;
        
    } catch (error) {
        console.error('現在の天気データ取得エラー:', error);
        return null;
    }
}

// ページ読み込み時に実行
document.addEventListener('DOMContentLoaded', function() {
    // Chart.jsが読み込まれるまで少し待つ
    setTimeout(() => {
        fetchWeatherData();
    }, 100);
});
</script>
