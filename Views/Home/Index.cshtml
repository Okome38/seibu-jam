@model List<seibuDatabase.Models.Message>
@{
    ViewData["Title"] = "青武jam";
    var userReactions = ViewBag.UserReactions as Dictionary<string, string> ?? new Dictionary<string, string>();
}

<div class="text-center">
    <h1 class="display-4">青武jam</h1>
    <p>福井高専行事予定 <a href="https://www.fukui-nct.ac.jp/wp/wp-content/uploads/2025/04/2faa9754d9a33485215a756bb4c73525-1.pdf">ここから見る</a></p>
</div>

<!-- 天気予報セクション -->
<div class="weather-section">
    <h2>天気予報</h2>
    <div id="weatherForecast" class="weather-forecast">
        <div class="weather-item">
            <div class="date">読み込み中...</div>
            <img class="weather-img" alt="天気アイコン">
            <div class="weather-telop">--</div>
            <div><span class="temp-min">-℃</span>/<span class="temp-max">-℃</span></div>
        </div>
    </div>
    <div id="location">
        <a href="https://www.jma.go.jp/bosai/forecast/" target="_blank">気象庁のデータを元に作成</a>
    </div>
    <div id="currentWeatherText"></div>
</div>

<!-- 混雑度グラフセクション -->
<div class="congestion-section">
    <h2>寮の風呂 混雑度（予測）</h2>
    <canvas id="congestionChart" width="400" height="200"></canvas>
</div>

<!-- 掲示板セクション -->
<div class="bulletin-section">
    <h1>掲示板</h1>

    <!-- 投稿フォーム -->
    <form asp-controller="Firebase" asp-action="PostMessage" method="post">
        <div class="form-group">
            <label>名前:</label>
            <input type="text" name="name" class="form-control" required />
        </div>
        <div class="form-group">
            <label>メッセージ:</label>
            <textarea name="message" class="form-control" rows="4" required></textarea>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">投稿</button>
        </div>
    </form>

    <hr />

    <!-- メッセージ一覧表示 -->
    <h2>投稿一覧</h2>
    @if (Model != null && Model.Count > 0)
{
    <div class="message-list">
        @foreach (var msg in Model.OrderByDescending(m => m.timestamp))
        {
            var messageId = msg.id; // FirebaseのキーIDを使用
            var userReaction = userReactions.ContainsKey(messageId) ? userReactions[messageId] : "";
            
            <div class="message-item card mb-3" data-message-id="@messageId">
                <div class="card-body">
                    <div class="message-header d-flex justify-content-between align-items-start">
                        <div>
                            <strong class="message-author">@msg.name</strong>
                            <small class="text-muted">（@msg.timestamp.ToLocalTime().ToString("yyyy/MM/dd HH:mm")）</small>
                        </div>
                    </div>
                    <div class="message-content mt-2">
                        @msg.message
                    </div>
                    <div class="message-reactions mt-3 d-flex align-items-center gap-2">
                        <button class="btn btn-sm reaction-btn like-btn @(userReaction == "like" ? "btn-success" : "btn-outline-success")" 
                                data-message-id="@messageId" data-is-like="true">
                            👍 <span class="like-count">@msg.likeCount</span>
                        </button>
                        <button class="btn btn-sm reaction-btn dislike-btn @(userReaction == "dislike" ? "btn-danger" : "btn-outline-danger")" 
                                data-message-id="@messageId" data-is-like="false">
                            👎 <span class="dislike-count">@msg.dislikeCount</span>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>投稿がまだありません。</p>
}
</div>

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- いいね/よくないね機能のJavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    // リアクションボタンのクリックイベント
    document.querySelectorAll('.reaction-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            
            const messageId = this.getAttribute('data-message-id');
            const isLike = this.getAttribute('data-is-like') === 'true';
            
            try {
                const response = await fetch('@Url.Action("AddReaction", "Firebase")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: `messageId=${encodeURIComponent(messageId)}&isLike=${isLike}`
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // ページをリロードして最新の状態を表示
                        window.location.reload();
                    }
                }
            } catch (error) {
                console.error('リアクションの送信に失敗しました:', error);
            }
        });
    });
});
</script>

<style>
.message-item {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    transition: box-shadow 0.2s ease;
}

.message-item:hover {
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.message-author {
    color: #495057;
    font-size: 1.1em;
}

.message-content {
    font-size: 1em;
    line-height: 1.5;
    color: #212529;
}

.message-reactions {
    border-top: 1px solid #e9ecef;
    padding-top: 10px;
}

.reaction-btn {
    border-radius: 20px;
    padding: 4px 12px;
    font-size: 0.9em;
    transition: all 0.2s ease;
    cursor: pointer;
}

.reaction-btn:hover {
    transform: translateY(-1px);
}

.reaction-btn.btn-success, .reaction-btn.btn-danger {
    color: white;
}

.like-count, .dislike-count {
    font-weight: bold;
}

.bulletin-section {
    margin-top: 2rem;
}

.weather-section, .congestion-section {
    margin-bottom: 2rem;
}

.gap-2 {
    gap: 0.5rem !important;
}
</style>
